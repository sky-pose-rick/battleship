(()=>{"use strict";const e=()=>{const e=[],t=[];for(let t=0;t<10;t+=1)e[t]=new Array(10).fill({});return{getTile:(t,n)=>e[t][n],placeShip:({row:n,col:o,length:r,isVertical:i})=>{const s=(e=>{const t=new Array(e).fill(!1);return{getLength:()=>e,isSunk:()=>t.every((e=>e)),hit:e=>{t[e]=!0}}})(r);if(t.push(s),i)for(let t=0;t<r;t+=1)e[n+t][o]={ship:s,pos:t};else for(let t=0;t<r;t+=1)e[n][o+t]={ship:s,pos:t}},receiveAttack:(t,n)=>{const o=e[t][n];return o.ship?(o.hit=!0,o.ship.hit(o.pos),!0):(e[t][n]={miss:!0},!1)},isAllSunk:()=>t.every((e=>e.isSunk())),isValidTarget:(t,n)=>{const o=e[t][n];return!(o.miss||o.hit)},getWidth:()=>e[0].length,getHeight:()=>e.length}},t=()=>{const e=[];let t=0;const n=[[0,-1],[-1,0],[0,1],[1,0]],o=e=>Math.floor(e*Math.random()),r=()=>{const e=o(10),t=o(10);return Promise.resolve([e,t])};return{takeTurn:async function(n,o){let r,i,s=!1;for(;!s;)[r,i]=await o(),s=n.isValidTarget(r,i);const l=n.receiveAttack(r,i);return l&&(e.push([r,i]),t=0),Promise.resolve({row:r,col:i,hit:l})},randomTarget:r,aiTarget:()=>{if(4===t&&(e.pop(),t=0),0===e.length)return r();let o,i;[o,i]=e[e.length-1];const s=n[t];return o+=s[0],i+=s[1],t+=1,Promise.resolve([o,i])}}};function n(e){const t=document.createElement("div"),n=document.createElement("table");t.appendChild(n);const o=e.getWidth(),r=e.getHeight();for(let t=0;t<r;t+=1){const r=document.createElement("tr");n.appendChild(r);for(let n=0;n<o;n+=1){const o=document.createElement("td");r.appendChild(o),o.innerText=(i=e.getTile(t,n)).hit||i.miss||i.ship?i.miss?".":i.hit&&i.ship.isSunk()?"X":i.hit?"x":"T":"O"}}var i;return t}const o=function(e,t){console.log("drawing borad");const o=n(t);e.firstChild?e.replaceChild(o,e.firstChild):e.appendChild(o)};function r(){const t=e();return t.placeShip({row:4,col:5,length:2,isVertical:!0}),t}function i(){const e=prompt("Select a row"),t=prompt("Select a col");return Promise.resolve([e,t])}const s=async function(){const e=t(),n=t(),s=r(),l=r(),c=document.getElementById("board1"),a=document.getElementById("board2");for(o(c,s),o(a,l);!s.isAllSunk();){o(c,s);const t=await e.takeTurn(l,i);if(console.log("Human: ",t),l.isAllSunk())break;o(a,l);const r=await n.takeTurn(s,n.aiTarget);console.log("AI: ",r)}o(c,s),o(a,l),console.log("game over")};console.log("webpack compiled to main.js"),Promise.resolve("loaded").then((()=>{s()})),console.log("end of main.js")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,