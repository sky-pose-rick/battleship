(()=>{"use strict";const e=()=>{const e=[],t=[];for(let t=0;t<10;t+=1)e[t]=new Array(10).fill({});return{getTile:(t,n)=>e[t][n],placeShip:({row:n,col:o,length:s,isVertical:r})=>{const l=(e=>{const t=new Array(e).fill(!1);return{getLength:()=>e,isSunk:()=>t.every((e=>e)),hit:e=>{t[e]=!0}}})(s);if(t.push(l),r)for(let t=0;t<s;t+=1)e[n+t][o]={ship:l,pos:t};else for(let t=0;t<s;t+=1)e[n][o+t]={ship:l,pos:t}},receiveAttack:(t,n)=>{const o=e[t][n];return o.ship?(o.hit=!0,o.ship.hit(o.pos),!0):(e[t][n]={miss:!0},!1)},isAllSunk:()=>t.every((e=>e.isSunk())),isValidTarget:(t,n)=>{const o=e[t][n];return!(o.miss||o.hit)},getWidth:()=>e[0].length,getHeight:()=>e.length}},t=()=>{const e=[];let t=0;const n=[[0,-1],[-1,0],[0,1],[1,0]],o=e=>Math.floor(e*Math.random()),s=()=>{const e=o(10),t=o(10);return Promise.resolve([e,t])};return{takeTurn:async function(n,o){let s,r,l=!1;for(;!l;)[s,r]=await o(),l=n.isValidTarget(s,r);const i=n.receiveAttack(s,r);return i&&(e.push([s,r]),t=0),Promise.resolve({row:s,col:r,hit:i})},randomTarget:s,aiTarget:()=>{if(4===t&&(e.pop(),t=0),0===e.length)return s();let o,r;[o,r]=e[e.length-1];const l=n[t];return o+=l[0],r+=l[1],t+=1,Promise.resolve([o,r])}}};function n(e,t){const n=document.createElement("td");return e.hit||e.miss||e.ship&&t?e.miss?(n.className="cell-miss",n.innerText="."):e.hit&&e.ship.isSunk()?(n.className="cell-sunk",n.innerText="X"):e.hit?(n.className="cell-hit",n.innerText="x"):(n.className="cell-ship",n.innerText="T"):(n.className="cell-empty",n.innerText="O"),n}function o(e,t=!1){console.log("board draw",t);const o=document.createElement("div"),s=document.createElement("table");o.appendChild(s);const r=e.getWidth(),l=e.getHeight();for(let o=0;o<l;o+=1){const l=document.createElement("tr");s.appendChild(l);for(let s=0;s<r;s+=1){const r=n(e.getTile(o,s),t);l.appendChild(r)}}return o}const s=function(e,t,n){console.log("drawing borad");const s=o(t,n);e.firstChild?e.replaceChild(s,e.firstChild):e.appendChild(s)};function r(){const t=e();return t.placeShip({row:4,col:5,length:2,isVertical:!0}),t}function l(){const e=prompt("Select a row"),t=prompt("Select a col");return Promise.resolve([e,t])}const i=async function(){const e=t(),n=t(),o=r(),i=r(),c=document.getElementById("board1"),a=document.getElementById("board2");for(s(c,o,!0),s(a,i);!o.isAllSunk();){s(c,o,!0);const t=await e.takeTurn(i,l);if(console.log("Human: ",t),i.isAllSunk())break;s(a,i);const r=await n.takeTurn(o,n.aiTarget);console.log("AI: ",r)}s(c,o,!0),s(a,i),console.log("game over")};console.log("webpack compiled to main.js"),Promise.resolve("loaded").then((()=>{i()})),console.log("end of main.js")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,