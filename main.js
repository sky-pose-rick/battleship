(()=>{"use strict";const e=()=>{const e=[],t=[];for(let t=0;t<10;t+=1)e[t]=new Array(10).fill({});return{getTile:(t,r)=>e[t][r],placeShip:({row:r,col:o,length:n,isVertical:i})=>{const l=(e=>{const t=new Array(e).fill(!1);return{getLength:()=>e,isSunk:()=>t.every((e=>e)),hit:e=>{t[e]=!0}}})(n);if(t.push(l),i)for(let t=0;t<n;t+=1)e[r+t][o]={ship:l,pos:t};else for(let t=0;t<n;t+=1)e[r][o+t]={ship:l,pos:t}},receiveAttack:(t,r)=>{const o=e[t][r];return o.ship?(o.hit=!0,o.ship.hit(o.pos),!0):(e[t][r]={miss:!0},!1)},isAllSunk:()=>t.every((e=>e.isSunk())),isValidTarget:(t,r)=>{const o=e[t][r];return!(o.miss||o.hit)}}},t=()=>{const e=[];let t=0;const r=[[0,-1],[-1,0],[0,1],[1,0]],o=e=>Math.floor(e*Math.random()),n=()=>{const e=o(10),t=o(10);return Promise.resolve([e,t])};return{takeTurn:async function(r,o){let n,i,l=!1;for(;!l;)[n,i]=await o(),l=r.isValidTarget(n,i);const s=r.receiveAttack(n,i);return s&&(e.push([n,i]),t=0),Promise.resolve({row:n,col:i,hit:s})},randomTarget:n,aiTarget:()=>{if(4===t&&(e.pop(),t=0),0===e.length)return n();let o,i;[o,i]=e[e.length-1];const l=r[t];return o+=l[0],i+=l[1],t+=1,Promise.resolve([o,i])}}};function r(){const t=e();return t.placeShip({row:0,col:2,length:2,isVertical:!1}),t.placeShip({row:3,col:0,length:3,isVertical:!1}),t.placeShip({row:4,col:3,length:3,isVertical:!0}),t.placeShip({row:2,col:5,length:4,isVertical:!1}),t.placeShip({row:6,col:5,length:5,isVertical:!1}),t}function o(){const e=prompt("Select a row"),t=prompt("Select a col");return Promise.resolve([e,t])}const n=async function(){const e=t(),n=t(),i=r(),l=r();for(;!i.isAllSunk();){const t=await e.takeTurn(l,o);if(console.log("Human: ",t),l.isAllSunk())break;const r=await n.takeTurn(i,n.aiTarget);console.log("AI: ",r)}};console.log("webpack compiled to main.js"),n()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxPQ2pEakMsU0FBU3NDLElBQ1AsTUFBTTdDLEVBQVE4QyxJQWlCZCxPQWhCQTlDLEVBQU1RLFVBQVUsQ0FDZEYsSUFBSyxFQUFHQyxJQUFLLEVBQUdFLE9BQVEsRUFBR0MsWUFBWSxJQUV6Q1YsRUFBTVEsVUFBVSxDQUNkRixJQUFLLEVBQUdDLElBQUssRUFBR0UsT0FBUSxFQUFHQyxZQUFZLElBRXpDVixFQUFNUSxVQUFVLENBQ2RGLElBQUssRUFBR0MsSUFBSyxFQUFHRSxPQUFRLEVBQUdDLFlBQVksSUFFekNWLEVBQU1RLFVBQVUsQ0FDZEYsSUFBSyxFQUFHQyxJQUFLLEVBQUdFLE9BQVEsRUFBR0MsWUFBWSxJQUV6Q1YsRUFBTVEsVUFBVSxDQUNkRixJQUFLLEVBQUdDLElBQUssRUFBR0UsT0FBUSxFQUFHQyxZQUFZLElBR2xDVixFQUdULFNBQVMrQyxJQUNQLE1BQU16QyxFQUFNMEMsT0FBTyxnQkFDYnpDLEVBQU15QyxPQUFPLGdCQUNuQixPQUFPYixRQUFRQyxRQUFRLENBQUM5QixFQUFLQyxJQXNDL0IsUUFuQ0ErQixpQkFFRSxNQUFNVyxFQUFVQyxJQUVWQyxFQUFVRCxJQUVWRSxFQUFTUCxJQUVUUSxFQUFTUixJQUdmLE1BQVFPLEVBQU81QixhQUFhLENBSTFCLE1BQU04QixRQUFnQkwsRUFBUVosU0FBU2dCLEVBQVFOLEdBTS9DLEdBTEFRLFFBQVFDLElBQUksVUFBV0YsR0FLbkJELEVBQU83QixZQUNULE1BS0YsTUFBTWlDLFFBQWdCTixFQUFRZCxTQUFTZSxFQUFRRCxFQUFRVCxVQUN2RGEsUUFBUUMsSUFBSSxPQUFRQyxLQ3ZEeEJGLFFBQVFDLElBQUksK0JBRVpFLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nYW1lTG9vcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNoaXBGYWN0b3J5ID0gKGxlbmd0aCkgPT4ge1xuICBjb25zdCBoaXRzID0gbmV3IEFycmF5KGxlbmd0aCkuZmlsbChmYWxzZSk7XG5cbiAgY29uc3QgZ2V0TGVuZ3RoID0gKCkgPT4gbGVuZ3RoO1xuICBjb25zdCBpc1N1bmsgPSAoKSA9PiBoaXRzLmV2ZXJ5KCh2YWx1ZSkgPT4gdmFsdWUpO1xuICBjb25zdCBoaXQgPSAoaW5kZXgpID0+IHtcbiAgICBoaXRzW2luZGV4XSA9IHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIHsgZ2V0TGVuZ3RoLCBpc1N1bmssIGhpdCB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc2hpcEZhY3Rvcnk7XG4iLCJpbXBvcnQgc2hpcEZhY3RvcnkgZnJvbSAnLi9zaGlwJztcblxuY29uc3QgZ2FtZWJvYXJkRmFjdG9yeSA9ICgpID0+IHtcbiAgY29uc3QgYm9hcmRTaXplID0gMTA7XG4gIGNvbnN0IGJvYXJkID0gW107XG4gIGNvbnN0IHNoaXBzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZFNpemU7IGkgKz0gMSkge1xuICAgIGJvYXJkW2ldID0gbmV3IEFycmF5KGJvYXJkU2l6ZSkuZmlsbCh7fSk7XG4gIH1cblxuICBjb25zdCBnZXRUaWxlID0gKHJvdywgY29sKSA9PiBib2FyZFtyb3ddW2NvbF07XG5cbiAgY29uc3QgcGxhY2VTaGlwID0gKHtcbiAgICByb3csIGNvbCwgbGVuZ3RoLCBpc1ZlcnRpY2FsLFxuICB9KSA9PiB7XG4gICAgY29uc3Qgc2hpcCA9IHNoaXBGYWN0b3J5KGxlbmd0aCk7XG4gICAgc2hpcHMucHVzaChzaGlwKTtcbiAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBib2FyZFtyb3cgKyBpXVtjb2xdID0ge1xuICAgICAgICAgIHNoaXAsXG4gICAgICAgICAgcG9zOiBpLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGJvYXJkW3Jvd11bY29sICsgaV0gPSB7XG4gICAgICAgICAgc2hpcCxcbiAgICAgICAgICBwb3M6IGksXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAocm93LCBjb2wpID0+IHtcbiAgICBjb25zdCBjZWxsID0gYm9hcmRbcm93XVtjb2xdO1xuICAgIGlmIChjZWxsLnNoaXApIHtcbiAgICAgIGNlbGwuaGl0ID0gdHJ1ZTtcbiAgICAgIGNlbGwuc2hpcC5oaXQoY2VsbC5wb3MpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGNyZWF0ZSBuZXcgY2VsbCBiZWNhdXNlIGFsbCBlbXB0eSBjZWxscyByZWZlcmVuY2Ugc2FtZSBvYmplY3RcbiAgICBib2FyZFtyb3ddW2NvbF0gPSB7IG1pc3M6IHRydWUgfTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgY29uc3QgaXNBbGxTdW5rID0gKCkgPT4gc2hpcHMuZXZlcnkoKHNoaXApID0+IHNoaXAuaXNTdW5rKCkpO1xuXG4gIGNvbnN0IGlzVmFsaWRUYXJnZXQgPSAocm93LCBjb2wpID0+IHtcbiAgICBjb25zdCBjZWxsID0gYm9hcmRbcm93XVtjb2xdO1xuICAgIHJldHVybiAhKGNlbGwubWlzcyB8fCBjZWxsLmhpdCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRUaWxlLCBwbGFjZVNoaXAsIHJlY2VpdmVBdHRhY2ssIGlzQWxsU3VuaywgaXNWYWxpZFRhcmdldCxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdhbWVib2FyZEZhY3Rvcnk7XG4iLCJpbXBvcnQgZ2FtZWJvYXJkRmFjdG9yeSBmcm9tICcuL2dhbWVib2FyZCc7XG5cbmNvbnN0IHBsYXllckZhY3RvcnkgPSAoKSA9PiB7XG4gIGNvbnN0IGJvYXJkU2l6ZSA9IDEwO1xuICBjb25zdCBoaXRTdGFjayA9IFtdO1xuICBsZXQgc2VhcmNoQ291bnQgPSAwO1xuICBjb25zdCBzZWFyY2hPZmZzZXRzID0gW1swLCAtMV0sIFstMSwgMF0sIFswLCAxXSwgWzEsIDBdXTtcblxuICBjb25zdCB0YWtlVHVybiA9IGFzeW5jIGZ1bmN0aW9uIHRha2VUdXJuKG90aGVyQm9hcmQsIHRhcmdldEZ1bmMpIHtcbiAgICBsZXQgdmFsaWRUYXJnZXQgPSBmYWxzZTtcbiAgICBsZXQgcm93O1xuICAgIGxldCBjb2w7XG4gICAgd2hpbGUgKCF2YWxpZFRhcmdldCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICAgIFtyb3csIGNvbF0gPSBhd2FpdCB0YXJnZXRGdW5jKCk7XG4gICAgICB2YWxpZFRhcmdldCA9IG90aGVyQm9hcmQuaXNWYWxpZFRhcmdldChyb3csIGNvbCk7XG4gICAgfVxuXG4gICAgY29uc3QgaGl0ID0gb3RoZXJCb2FyZC5yZWNlaXZlQXR0YWNrKHJvdywgY29sKTtcbiAgICBpZiAoaGl0KSB7XG4gICAgICBoaXRTdGFjay5wdXNoKFtyb3csIGNvbF0pO1xuICAgICAgc2VhcmNoQ291bnQgPSAwO1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygndGFyZ2V0ZWQnLCByb3csIGNvbCk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgcm93LCBjb2wsIGhpdCB9KTtcbiAgfTtcblxuICBjb25zdCByYW5kSW50ID0gKG51bSkgPT4gTWF0aC5mbG9vcihudW0gKiBNYXRoLnJhbmRvbSgpKTtcblxuICBjb25zdCByYW5kb21UYXJnZXQgPSAoKSA9PiB7XG4gICAgY29uc3Qgcm93ID0gcmFuZEludChib2FyZFNpemUpO1xuICAgIGNvbnN0IGNvbCA9IHJhbmRJbnQoYm9hcmRTaXplKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtyb3csIGNvbF0pO1xuICB9O1xuXG4gIGNvbnN0IGFpVGFyZ2V0ID0gKCkgPT4ge1xuICAgIGlmIChzZWFyY2hDb3VudCA9PT0gNCkge1xuICAgICAgaGl0U3RhY2sucG9wKCk7XG4gICAgICBzZWFyY2hDb3VudCA9IDA7XG4gICAgfVxuICAgIGlmIChoaXRTdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnN0IHJhbmRvbVByb21pc2UgPSByYW5kb21UYXJnZXQoKTtcbiAgICAgIHJldHVybiByYW5kb21Qcm9taXNlO1xuICAgIH1cbiAgICBsZXQgcm93O1xuICAgIGxldCBjb2w7XG4gICAgW3JvdywgY29sXSA9IGhpdFN0YWNrW2hpdFN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IG9mZnNldCA9IHNlYXJjaE9mZnNldHNbc2VhcmNoQ291bnRdO1xuICAgIHJvdyArPSBvZmZzZXRbMF07XG4gICAgY29sICs9IG9mZnNldFsxXTtcbiAgICBzZWFyY2hDb3VudCArPSAxO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW3JvdywgY29sXSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB0YWtlVHVybiwgcmFuZG9tVGFyZ2V0LCBhaVRhcmdldCxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXllckZhY3Rvcnk7XG4iLCJpbXBvcnQgZ2FtZWJvYXJkRmFjdG9yeSBmcm9tICcuL2dhbWVib2FyZCc7XG5pbXBvcnQgcGxheWVyRmFjdG9yeSBmcm9tICcuL3BsYXllcic7XG5cbmZ1bmN0aW9uIHN0YXRpY0JvYXJkU2V0dXAoKSB7XG4gIGNvbnN0IGJvYXJkID0gZ2FtZWJvYXJkRmFjdG9yeSgpO1xuICBib2FyZC5wbGFjZVNoaXAoe1xuICAgIHJvdzogMCwgY29sOiAyLCBsZW5ndGg6IDIsIGlzVmVydGljYWw6IGZhbHNlLFxuICB9KTtcbiAgYm9hcmQucGxhY2VTaGlwKHtcbiAgICByb3c6IDMsIGNvbDogMCwgbGVuZ3RoOiAzLCBpc1ZlcnRpY2FsOiBmYWxzZSxcbiAgfSk7XG4gIGJvYXJkLnBsYWNlU2hpcCh7XG4gICAgcm93OiA0LCBjb2w6IDMsIGxlbmd0aDogMywgaXNWZXJ0aWNhbDogdHJ1ZSxcbiAgfSk7XG4gIGJvYXJkLnBsYWNlU2hpcCh7XG4gICAgcm93OiAyLCBjb2w6IDUsIGxlbmd0aDogNCwgaXNWZXJ0aWNhbDogZmFsc2UsXG4gIH0pO1xuICBib2FyZC5wbGFjZVNoaXAoe1xuICAgIHJvdzogNiwgY29sOiA1LCBsZW5ndGg6IDUsIGlzVmVydGljYWw6IGZhbHNlLFxuICB9KTtcblxuICByZXR1cm4gYm9hcmQ7XG59XG5cbmZ1bmN0aW9uIHByb21wdFRhcmdldGluZygpIHtcbiAgY29uc3Qgcm93ID0gcHJvbXB0KCdTZWxlY3QgYSByb3cnKTtcbiAgY29uc3QgY29sID0gcHJvbXB0KCdTZWxlY3QgYSBjb2wnKTtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbcm93LCBjb2xdKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuR2FtZSgpIHtcbiAgLy8gY3JlYXRlIHBsYXllciAxXG4gIGNvbnN0IHBsYXllcjEgPSBwbGF5ZXJGYWN0b3J5KCk7XG4gIC8vIGNyZWF0ZSBwbGF5ZXIgMlxuICBjb25zdCBwbGF5ZXIyID0gcGxheWVyRmFjdG9yeSgpO1xuICAvLyBjcmVhdGUgYm9hcmQgMVxuICBjb25zdCBib2FyZDEgPSBzdGF0aWNCb2FyZFNldHVwKCk7XG4gIC8vIGNyZWF0ZSBib2FyZCAyXG4gIGNvbnN0IGJvYXJkMiA9IHN0YXRpY0JvYXJkU2V0dXAoKTtcblxuICAvLyBzdGFydCBsb29wXG4gIHdoaWxlICghYm9hcmQxLmlzQWxsU3VuaygpKSB7XG4gIC8vIGRyYXcgYm9hcmRcbiAgLy8gYXNrIGh1bWFuIHBsYXllciB0byBjaG9vc2UgdGFyZ2V0XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWF3YWl0LWluLWxvb3BcbiAgICBjb25zdCBhY3Rpb24xID0gYXdhaXQgcGxheWVyMS50YWtlVHVybihib2FyZDIsIHByb21wdFRhcmdldGluZyk7XG4gICAgY29uc29sZS5sb2coJ0h1bWFuOiAnLCBhY3Rpb24xKTtcbiAgICAvLyBhbGxvdyBjbGlja2luZyBvbiBib2FyZFxuICAgIC8vIG9uY2UgdGFyZ2V0IGlzIHNlbGVjdGVkLCBlbmQgY2xpY2tpbmdcblxuICAgIC8vIGNoZWNrIGlmIEFJIGxvc2VzXG4gICAgaWYgKGJvYXJkMi5pc0FsbFN1bmsoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIGRvbid0IHJlZHJhdyBib2FyZFxuICAgIC8vIEFJIGNob29zZSB0YXJnZXRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgIGNvbnN0IGFjdGlvbjIgPSBhd2FpdCBwbGF5ZXIyLnRha2VUdXJuKGJvYXJkMSwgcGxheWVyMi5haVRhcmdldCk7XG4gICAgY29uc29sZS5sb2coJ0FJOiAnLCBhY3Rpb24yKTtcbiAgLy8gY2hlY2sgaWYgaHVtYW4gbG9zZXNcbiAgLy8gYmFjayB0byB0b3Agb2YgbG9vcFxuICB9XG4gIC8vIGV4aXQgZnVuY3Rpb25cbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBydW5HYW1lIH07XG4iLCJpbXBvcnQgZ2FtZUxvb3AgZnJvbSAnLi9nYW1lTG9vcCc7XG5cbi8vIHRlc3QgdGhhdCB3ZWJwYWNrIHdvcmtzXG5jb25zb2xlLmxvZygnd2VicGFjayBjb21waWxlZCB0byBtYWluLmpzJyk7XG5cbmdhbWVMb29wLnJ1bkdhbWUoKTtcbiJdLCJuYW1lcyI6WyJib2FyZCIsInNoaXBzIiwiaSIsIkFycmF5IiwiZmlsbCIsImdldFRpbGUiLCJyb3ciLCJjb2wiLCJwbGFjZVNoaXAiLCJsZW5ndGgiLCJpc1ZlcnRpY2FsIiwic2hpcCIsImhpdHMiLCJnZXRMZW5ndGgiLCJpc1N1bmsiLCJldmVyeSIsInZhbHVlIiwiaGl0IiwiaW5kZXgiLCJwdXNoIiwicG9zIiwicmVjZWl2ZUF0dGFjayIsImNlbGwiLCJtaXNzIiwiaXNBbGxTdW5rIiwiaXNWYWxpZFRhcmdldCIsImhpdFN0YWNrIiwic2VhcmNoQ291bnQiLCJzZWFyY2hPZmZzZXRzIiwicmFuZEludCIsIm51bSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJhbmRvbVRhcmdldCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGFrZVR1cm4iLCJhc3luYyIsIm90aGVyQm9hcmQiLCJ0YXJnZXRGdW5jIiwidmFsaWRUYXJnZXQiLCJhaVRhcmdldCIsInBvcCIsIm9mZnNldCIsInN0YXRpY0JvYXJkU2V0dXAiLCJnYW1lYm9hcmQiLCJwcm9tcHRUYXJnZXRpbmciLCJwcm9tcHQiLCJwbGF5ZXIxIiwicGxheWVyIiwicGxheWVyMiIsImJvYXJkMSIsImJvYXJkMiIsImFjdGlvbjEiLCJjb25zb2xlIiwibG9nIiwiYWN0aW9uMiIsImdhbWVMb29wIl0sInNvdXJjZVJvb3QiOiIifQ==