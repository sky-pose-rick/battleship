(()=>{"use strict";const e=()=>{const e=[],t=[];for(let t=0;t<10;t+=1)e[t]=new Array(10).fill({});return{getTile:(t,n)=>e[t][n],placeShip:({row:n,col:i,length:l,isVertical:r})=>{const o=(e=>{const t=new Array(e).fill(!1);return{getLength:()=>e,isSunk:()=>t.every((e=>e)),hit:e=>{t[e]=!0}}})(l);if(t.push(o),r)for(let t=0;t<l;t+=1)e[n+t][i]={ship:o,pos:t};else for(let t=0;t<l;t+=1)e[n][i+t]={ship:o,pos:t}},receiveAttack:(t,n)=>{const i=e[t][n];return i.ship?(i.hit=!0,i.ship.hit(i.pos),!0):(e[t][n]={miss:!0},!1)},isAllSunk:()=>t.every((e=>e.isSunk())),isValidTarget:(t,n)=>{if(t<0||t>=10||n<0||n>=10)return!1;const i=e[t][n];return!(i.miss||i.hit)},getWidth:()=>e[0].length,getHeight:()=>e.length}},t=()=>{const e=[];let t=0;const n=[[0,-1],[-1,0],[0,1],[1,0]],i=e=>Math.floor(e*Math.random()),l=()=>{const e=i(10),t=i(10);return Promise.resolve([e,t])};return{takeTurn:async function(n,i){let l,r,o=!1;for(;!o;)[l,r]=await i(),o=n.isValidTarget(l,r);const s=n.receiveAttack(l,r);return s&&(e.push([l,r]),t=0),Promise.resolve({row:l,col:r,hit:s})},randomTarget:l,aiTarget:()=>{if(4===t&&(e.pop(),t=0),0===e.length)return l();let i,r;[i,r]=e[e.length-1];const o=n[t];return i+=o[0],r+=o[1],t+=1,Promise.resolve([i,r])}}};function n(e,t){let n,i;return e.hit||e.miss||e.ship&&t?e.miss?(i="cell-miss",n="."):e.hit&&e.ship.isSunk()?(i="cell-sunk",n="X"):e.hit?(i="cell-hit",n="x"):(i="cell-ship",n="T"):(i="cell-empty",n="O"),{symbol:n,category:i}}const i=function(e,t,i,l){const r=function(e,t=!1,i){const l=document.createElement("div"),r=document.createElement("table");l.appendChild(r);const o=e.getWidth(),s=e.getHeight();for(let l=0;l<s;l+=1){const s=document.createElement("tr");r.appendChild(s);for(let r=0;r<o;r+=1){const o=document.createElement("td");s.appendChild(o);const c=document.createElement("button");o.append(c);const a=n(e.getTile(l,r),t);c.className=a.category,c.innerText=a.symbol,!t&&i&&c.addEventListener("click",(()=>{i.emit("target-select",[l,r])}))}}return l}(t,i,l);e.firstChild?e.replaceChild(r,e.firstChild):e.appendChild(r)},l=function(e,t,n){const i=function(e,t){const n=document.createElement("p");return n.innerText=`${t} targeted [${e.row}, ${e.col}].`,n.className="log-event",e.hit&&(n.innerText+=" Hit!"),n}(t,n);e.appendChild(i)},r=function(e,t){const n=document.createElement("p");e.appendChild(n),n.className="log-event",n.innerText=`${t} Wins!`};function o(){const t=e();return t.placeShip({row:0,col:2,length:2,isVertical:!1}),t.placeShip({row:3,col:0,length:3,isVertical:!1}),t.placeShip({row:4,col:3,length:3,isVertical:!0}),t.placeShip({row:2,col:5,length:4,isVertical:!1}),t.placeShip({row:6,col:5,length:5,isVertical:!1}),t}const s=async function(){const e=t(),n=t(),s=o(),c=o(),a=(e=>{const t=e||{};return{subscribe:(e,n)=>((t[e]||(t[e]=[])).push(n),{unsubscribe:()=>{t[e]&&t[e].splice(t[e].indexOf(n)>>>0,1)}}),emit:(e,n)=>{(t[e]||[]).forEach((e=>{e(...n)}))}}})(),u=()=>function(e){let t;const n=new Promise((n=>{t=e.subscribe("target-select",((e,t)=>{n([e,t])}))}));return n.finally((()=>{t.unsubscribe()})),n}(a),h=document.getElementById("board1"),p=document.getElementById("board2"),d=document.getElementById("log");for(i(h,s,!0),i(p,c,!1,a);!s.isAllSunk();){i(h,s,!0);const t=await e.takeTurn(c,u);if(l(d,t,"Human"),c.isAllSunk())break;i(p,c,!1,a);const r=await n.takeTurn(s,n.aiTarget);l(d,r,"AI")}s.isAllSunk()?(i(h,s,!0),i(p,c,!0),r(d,"AI")):(i(p,c,!0),r(d,"Human"))};console.log("webpack compiled to main.js"),Promise.resolve("loaded").then((()=>{s()})),console.log("end of main.js")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,